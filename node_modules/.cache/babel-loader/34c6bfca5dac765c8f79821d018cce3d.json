{"remainingRequest":"/Library/WebServer/Documents/runju2.0/node_modules/babel-loader/lib/index.js!/Library/WebServer/Documents/runju2.0/src/utils/request.js","dependencies":[{"path":"/Library/WebServer/Documents/runju2.0/src/utils/request.js","mtime":1543677490808},{"path":"/Library/WebServer/Documents/runju2.0/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Library/WebServer/Documents/runju2.0/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\nimport store from '../store';\nimport { getToken } from '@/utils/auth'; // 创建axios实例\n\nconst service = axios.create({\n  baseURL: '/api/',\n  // api的base_url\n  // baseURL: process.env.BASE_API,\n  method: 'post',\n  timeout: 15000,\n  headers: {\n    'X-Custom-Header': 'foobar',\n    'Access-Control-Allow-Credentials': 'false',\n    'Access-Control-Allow-Origin': '*',\n    'Access-Control-Allow-Methods': 'GET, POST, PATCH, PUT, OPTIONS',\n    'Access-Control-Allow-Headers': 'Content-Type, Accept, Authorization, X-Requested-With, Origin, Accept',\n    'X-Requested-With': 'XMLHttpRequest'\n  },\n  // headers: {\n  //   'Content-Type': 'application/x-www-form-urlencoded',\n  //   'Accept': 'application/json'\n  // },\n  responseType: 'json'\n}); // request拦截器\n\nservice.interceptors.request.use(config => {\n  if (store.getters.token) {\n    config.headers['Authorization'] = 'Bearer' + getToken(); // 让每个请求携带自定义token 请根据实际情况自行修改\n  }\n\n  return config;\n}, error => {\n  // Do something with request error\n  console.log(error); // for debug\n\n  Promise.reject(error);\n}); // respone拦截器\n\nservice.interceptors.response.use(response => {\n  /**\n  * code为非20000是抛错 可结合自己业务进行修改\n  */\n  const res = response.data;\n\n  if (response.status !== 200) {\n    Message({\n      message: res.message,\n      type: 'error',\n      duration: 5 * 1000\n    });\n    return Promise.reject('error');\n  } else {\n    return response.data;\n  }\n}, error => {\n  console.log('err' + error); // for debug\n\n  Message({\n    message: error.message,\n    type: 'error',\n    duration: 5 * 1000\n  });\n  return Promise.reject(error);\n});\nexport default service;",{"version":3,"sources":["/Library/WebServer/Documents/runju2.0/src/utils/request.js"],"names":["axios","store","getToken","service","create","baseURL","method","timeout","headers","responseType","interceptors","request","use","config","getters","token","error","console","log","Promise","reject","response","res","data","status","Message","message","type","duration"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,UAAlB;AACA,SAASC,QAAT,QAAyB,cAAzB,C,CAEA;;AACA,MAAMC,UAAUH,MAAMI,MAAN,CAAa;AAC3BC,WAAS,OADkB;AACT;AAClB;AACAC,UAAQ,MAHmB;AAI3BC,WAAS,KAJkB;AAK3BC,WAAS;AAAE,uBAAmB,QAArB;AAA+B,wCAAoC,OAAnE;AAA4E,mCAA+B,GAA3G;AAAgH,oCAAgC,gCAAhJ;AAAkL,oCAAgC,uEAAlN;AAA2R,wBAAoB;AAA/S,GALkB;AAM3B;AACA;AACA;AACA;AACAC,gBAAc;AAVa,CAAb,CAAhB,C,CAaA;;AACAN,QAAQO,YAAR,CAAqBC,OAArB,CAA6BC,GAA7B,CAAiCC,UAAU;AACzC,MAAIZ,MAAMa,OAAN,CAAcC,KAAlB,EAAyB;AACvBF,WAAOL,OAAP,CAAe,eAAf,IAAkC,WAAWN,UAA7C,CADuB,CACiC;AACzD;;AACD,SAAOW,MAAP;AACD,CALD,EAKGG,SAAS;AACV;AACAC,UAAQC,GAAR,CAAYF,KAAZ,EAFU,CAES;;AACnBG,UAAQC,MAAR,CAAeJ,KAAf;AACD,CATD,E,CAWA;;AACAb,QAAQO,YAAR,CAAqBW,QAArB,CAA8BT,GAA9B,CACES,YAAY;AACZ;;;AAGE,QAAMC,MAAMD,SAASE,IAArB;;AACA,MAAIF,SAASG,MAAT,KAAoB,GAAxB,EAA6B;AAC3BC,YAAQ;AACNC,eAASJ,IAAII,OADP;AAENC,YAAM,OAFA;AAGNC,gBAAU,IAAI;AAHR,KAAR;AAMA,WAAOT,QAAQC,MAAR,CAAe,OAAf,CAAP;AACD,GARD,MAQO;AACL,WAAOC,SAASE,IAAhB;AACD;AACF,CAjBH,EAkBEP,SAAS;AACPC,UAAQC,GAAR,CAAY,QAAQF,KAApB,EADO,CACmB;;AAC1BS,UAAQ;AACNC,aAASV,MAAMU,OADT;AAENC,UAAM,OAFA;AAGNC,cAAU,IAAI;AAHR,GAAR;AAKA,SAAOT,QAAQC,MAAR,CAAeJ,KAAf,CAAP;AACD,CA1BH;AA6BA,eAAeb,OAAf","sourcesContent":["import axios from 'axios'\nimport store from '../store'\nimport { getToken } from '@/utils/auth'\n\n// 创建axios实例\nconst service = axios.create({\n  baseURL: '/api/', // api的base_url\n  // baseURL: process.env.BASE_API,\n  method: 'post',\n  timeout: 15000,\n  headers: { 'X-Custom-Header': 'foobar', 'Access-Control-Allow-Credentials': 'false', 'Access-Control-Allow-Origin': '*', 'Access-Control-Allow-Methods': 'GET, POST, PATCH, PUT, OPTIONS', 'Access-Control-Allow-Headers': 'Content-Type, Accept, Authorization, X-Requested-With, Origin, Accept', 'X-Requested-With': 'XMLHttpRequest' },\n  // headers: {\n  //   'Content-Type': 'application/x-www-form-urlencoded',\n  //   'Accept': 'application/json'\n  // },\n  responseType: 'json'\n})\n\n// request拦截器\nservice.interceptors.request.use(config => {\n  if (store.getters.token) {\n    config.headers['Authorization'] = 'Bearer' + getToken() // 让每个请求携带自定义token 请根据实际情况自行修改\n  }\n  return config\n}, error => {\n  // Do something with request error\n  console.log(error) // for debug\n  Promise.reject(error)\n})\n\n// respone拦截器\nservice.interceptors.response.use(\n  response => {\n  /**\n  * code为非20000是抛错 可结合自己业务进行修改\n  */\n    const res = response.data\n    if (response.status !== 200) {\n      Message({\n        message: res.message,\n        type: 'error',\n        duration: 5 * 1000\n      })\n\n      return Promise.reject('error')\n    } else {\n      return response.data\n    }\n  },\n  error => {\n    console.log('err' + error)// for debug\n    Message({\n      message: error.message,\n      type: 'error',\n      duration: 5 * 1000\n    })\n    return Promise.reject(error)\n  }\n)\n\nexport default service\n"]}]}